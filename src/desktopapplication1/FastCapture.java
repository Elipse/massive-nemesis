/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FastCapture.java
 *
 * Created on 14/09/2013, 06:02:13 PM
 */
package desktopapplication1;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.Beans;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import org.apache.commons.lang3.StringUtils;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;
//import org.jdesktop.application.Application;
//import org.jdesktop.application.ResourceMap;

/**
 *
 * @author elialva
 */
public class FastCapture extends javax.swing.JFrame implements DocumentListener, KeyListener {

    private final Selector selector;
    public final static Style[] styles;

    static {
        String[] styleNames = new String[]{"magentaStyle", "blueStyle", "redStyle"};
        styles = new Style[styleNames.length];
        Color[] colors = new Color[]{Color.magenta, Color.blue, Color.red};
        StyleContext sc = new StyleContext();

        for (int i = 0; i < styles.length; i++) {
            styles[i] = sc.addStyle(styleNames[i], sc.getStyle(StyleContext.DEFAULT_STYLE));
            StyleConstants.setForeground(styles[i], colors[i]);
            StyleConstants.setBold(styles[i], true);
        }
    }

    /**
     * Creates new form FastCapture
     */
    public FastCapture() {
        initComponents();
        selector = new Selector();
        jTextPane1.getDocument().addDocumentListener(FastCapture.this);
        jTextPane1.addKeyListener(FastCapture.this);

        BindingGroup bindingGroup = new BindingGroup();
//        if (jTableBinding != null) {
//            bindingGroup.removeBinding(jTableBinding);
//        }
        JTableBinding jTableBinding = SwingBindings.createJTableBinding(AutoBinding.UpdateStrategy.READ_WRITE, busqproductoList, jTable1);

        JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${" + "contexto" + "}"));
        columnBinding.setColumnName("Contexto");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(ELProperty.create("${" + "alignment" + "}"));
        columnBinding.setColumnName("Alignment");
        columnBinding.setColumnClass(Object.class);

        bindingGroup.addBinding(jTableBinding);
        bindingGroup.bind();

        TableColumn column = jTable1.getColumnModel().getColumn(0);
        System.out.println("COMUNK " + column.getIdentifier());
        column.setCellRenderer(new TableCellRendererX());
        TableColumn columnA = jTable1.getColumnModel().getColumn(1);
        jTable1.getColumnModel().removeColumn(columnA);

        jTable1.setRowHeight(64);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        busquedaPUEntityManager = Beans.isDesignTime() ? null : Persistence.createEntityManagerFactory("busquedaPU").createEntityManager();
        busqproductoQuery = Beans.isDesignTime() ? null : busquedaPUEntityManager.createQuery("SELECT b FROM Busqproducto b");
        busqproductoList = Beans.isDesignTime() ? Collections.emptyList() : busqproductoQuery.getResultList();
        jScrollPane2 = new JScrollPane();
        jTable1 = new JTable();
        jScrollPane1 = new JScrollPane();
        jTextPane1 = new JTextPane();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane2.setViewportView(jTable1);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextPane1.setName("jTextPane1"); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 211, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FastCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FastCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FastCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FastCapture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FastCapture().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private List<Busqproducto> busqproductoList;
    private Query busqproductoQuery;
    private EntityManager busquedaPUEntityManager;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTable jTable1;
    private JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    public void insertUpdate(DocumentEvent e) {
        String text = null;
        try {
            text = e.getDocument().getText(0, e.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(FastCapture.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<Busqproducto> page = selector.getPage(text);
        System.out.println("insertoso " + page.size());
        for (Busqproducto busqproducto : page) {
            System.out.println("GUAMAZO " + busqproducto.getContexto());
        }
        busqproductoList.clear();
        busqproductoList.addAll(page);
        this.invalidate();
        this.repaint();
        colorStyledDocument((DefaultStyledDocument) e.getDocument());
    }

    public void removeUpdate(DocumentEvent e) {
        String text = null;
        try {
            text = e.getDocument().getText(0, e.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(FastCapture.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<Busqproducto> page = selector.getPage(text);
        busqproductoList.clear();
        busqproductoList.addAll(page);
        this.invalidate();
        this.repaint();
        colorStyledDocument((DefaultStyledDocument) e.getDocument());

    }

    public void changedUpdate(DocumentEvent e) {
    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP: {
                changeListSelectedIndex(-1);
                break;
            }
            case KeyEvent.VK_DOWN: {
                changeListSelectedIndex(1);
                break;
            }
        }
    }

    public void keyReleased(KeyEvent e) {
    }

    private void changeListSelectedIndex(int delta) {
        int size = jTable1.getModel().getRowCount();
        int index = jTable1.getSelectionModel().getMinSelectionIndex();

        int newIndex = index + delta;

        if (newIndex < 0) {
            newIndex = size - 1;
        }

        if (newIndex >= size) {
            newIndex = 0;
        }

        if (newIndex < 0) {
            jTable1.getSelectionModel().clearSelection();
        } else {
            jTable1.getSelectionModel().setSelectionInterval(newIndex, newIndex);
        }
    }

    public void colorStyledDocument(final DefaultStyledDocument document) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                String input = "";
                try {
                    input = document.getText(0, document.getLength());
                } catch (BadLocationException ex) {
//                    Logger.getLogger(ColorPane.class.getName()).log(Level.SEVERE, null, ex);
                }

                StringBuilder inputMut = new StringBuilder(input);
                String[] split = StringUtils.split(inputMut.toString());
                int i = 0;
                for (String string : split) {
                    int start = inputMut.indexOf(string);
                    int end = start + string.length();
                    inputMut.replace(start, end, StringUtils.repeat(" ", string.length()));
                    document.setCharacterAttributes(start, string.length(), styles[i++ % styles.length], true);
                }
            }
        });
    }

    private class TableCellRendererX extends JLabel implements TableCellRenderer {

        private String[] trueColors = new String[]{"Fuchsia", "Blue", "Red"};

        public TableCellRendererX() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            int rowModel = table.convertRowIndexToModel(row);
            int columnCount = table.getModel().getColumnCount();
            System.out.println("comddddd " + columnCount);
            List<SimpleEntry<Integer, Integer>> alignment = null;

            for (int i = 0; i < columnCount; i++) {
                if (table.getModel().getColumnName(i).equalsIgnoreCase("Alignment")) {
                    alignment = (List<SimpleEntry<Integer, Integer>>) table.getModel().getValueAt(rowModel, i);
                    break;
                }
            }

            if (isSelected) {
                setBackground(table.getSelectionBackground());
            } else {
                setBackground(table.getBackground());
            }

            setText(colorByPosition(value == null ? "" : value.toString(), alignment));

            return this;
        }

        public String colorByPosition(String text, List<SimpleEntry<Integer, Integer>> alignment) {

            if (text == null) {
                return "";
            }

            if (alignment == null) {
                return text;
            }

            ArrayList<String> posColor = new ArrayList<String>();
            int j = 0;
            for (SimpleEntry<Integer, Integer> simpleEntry : alignment) {
                String s
                        = String.format("%05d", simpleEntry.getKey()) + ":"
                        + String.format("%05d", simpleEntry.getValue()) + ":"
                        + trueColors[j++ % trueColors.length];
                posColor.add(s);
            }

            Collections.sort(posColor);

            String color = "<b><font color=#colorname#>#text#</font></b>";
            String htmlText = "";

            int ind = 0;
            for (String color_pos : posColor) {
                String[] split = color_pos.split(":");
                int begin = Integer.parseInt(split[0]);
                int end = Integer.parseInt(split[1]);
                String subText = text.substring(begin, begin + end);
                String colorString = color.replaceAll("#colorname#", split[2]).replaceAll("#text#", subText);
                htmlText += text.substring(ind, begin) + colorString;
                ind = begin + end;
            }

            htmlText += text.substring(ind);

            return "<html>" + htmlText + "</html>";
        }
    }
}
